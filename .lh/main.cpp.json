{
    "sourceFile": "main.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 74,
            "patches": [
                {
                    "date": 1758244304857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758244310368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,3 @@\n void main(){\n-    \n+    int array1[]\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244317539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,4 @@\n void main(){\n-    int array1[]\n+    int array1[] = {1, 2, 3, 4, 5};\n+    int array2\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244324768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n void main(){\n     int array1[] = {1, 2, 3, 4, 5};\n-    int array2\n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    int array3[]\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244333311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n void main(){\n     int array1[] = {1, 2, 3, 4, 5};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n-    int array3[]\n+    int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244340096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n void main(){\n     int array1[] = {1, 2, 3, 4, 5};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n+    int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244358083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n void main(){\n     int array1[] = {1, 2, 3, 4, 5};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n-    int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n+    int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244450382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,11 @@\n void main(){\n     int array1[] = {1, 2, 3, 4, 5};\n+        int array1[] = {1, 2, 3, 4, 5};\n+\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n \n+\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244457155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n void main(){\n     int array1[] = {1, 2, 3, 4, 5};\n+    int array1[] = {1, 2, 3, 4, 5};\n         int array1[] = {1, 2, 3, 4, 5};\n \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n"
                },
                {
                    "date": 1758244488633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n void main(){\n-    int array1[] = {1, 2, 3, 4, 5};\n-    int array1[] = {1, 2, 3, 4, 5};\n-        int array1[] = {1, 2, 3, 4, 5};\n+   \n \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n"
                },
                {
                    "date": 1758244495266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n+    int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n \n \n \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244504196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n    \n \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n+        int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n+\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n \n \n"
                },
                {
                    "date": 1758244509930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n void main(){\n    \n-\n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n-        int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n+    int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n \n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n \n"
                },
                {
                    "date": 1758244531858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n void main(){\n-   \n+    //busca sequencia\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n-\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n \n \n"
                },
                {
                    "date": 1758244538815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n void main(){\n-    //busca sequencia\n+    //busca sequencial em que procura o elemento do meio\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n"
                },
                {
                    "date": 1758244553436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n void main(){\n-    //busca sequencial em que procura o elemento do meio\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n"
                },
                {
                    "date": 1758244623547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n void main(){\n-    int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n-    int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15};\n+    \n+    \n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n \n \n"
                },
                {
                    "date": 1758244629477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,11 @@\n     \n     \n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n+    int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n \n \n \n \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758244646684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n void main(){\n     \n-    \n+    //array com \n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n-    int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n+    int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n \n \n \n \n"
                },
                {
                    "date": 1758244655399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n void main(){\n     \n-    //array com \n+    //array com mesmo tamanho que busca o numero \n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n \n"
                },
                {
                    "date": 1758244780064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n void main(){\n     \n-    //array com mesmo tamanho que busca o numero \n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n \n"
                },
                {
                    "date": 1758245463898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n void main(){\n     \n-    int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n-    int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n-    int array4[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n+    int array1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n+    int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n+  \n \n \n \n \n \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758245474921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n void main(){\n     \n+    //buscar o numero do meio com 3 vetores\n+\n     int array1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n   \n"
                },
                {
                    "date": 1758245482640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n void main(){\n     \n-    //buscar o numero do meio com 3 vetores\n+    //buscar o numero do meio com 3 vetores que t\n \n     int array1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n"
                },
                {
                    "date": 1758245491615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n void main(){\n     \n-    //buscar o numero do meio com 3 vetores que t\n+    //buscar o numero do meio com 3 vetores de N escalar\n \n     int array1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n     int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n"
                },
                {
                    "date": 1758245501398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,9 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n \n-    int array1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,0};\n-    int array3[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,  5, 6, 7, 8, 9, 12, 13, 14, 15, 0, 0, 0,0,0,0,0,0,0,9};\n-  \n+    int array1\n \n \n \n \n"
                },
                {
                    "date": 1758245507811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n \n-    int array1\n+    int array1[]]\n \n \n \n \n"
                },
                {
                    "date": 1758245514733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n \n-    int array1[]]\n+    int array1[]: {1, 2, 3, 4, 5};\n+    int array2[]: {1, 2, 3, 4,\n \n \n \n \n"
                },
                {
                    "date": 1758245528521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n \n-    int array1[]: {1, 2, 3, 4, 5};\n-    int array2[]: {1, 2, 3, 4,\n+    int array1[]: {1, 2, 5, 4, 5};\n+    int array2[]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    int\n \n \n \n \n"
                },
                {
                    "date": 1758245548061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n \n-    int array1[]: {1, 2, 5, 4, 5};\n+    int array1[]: {1, 2, 5, 4, 9};\n     int array2[]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n-    int\n+    int array3\n \n \n \n \n"
                },
                {
                    "date": 1758245556153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n     //buscar o numero do meio com 3 vetores de N escalar\n \n     int array1[]: {1, 2, 5, 4, 9};\n     int array2[]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n-    int array3\n+    int array3[]: {1, 2, 3, 4, 20, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n \n \n \n"
                },
                {
                    "date": 1758245598654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n     //buscar o numero do meio com 3 vetores de N escalar\n \n     int array1[]: {1, 2, 5, 4, 9};\n     int array2[]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n-    int array3[]: {1, 2, 3, 4, 20, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n \n \n \n"
                },
                {
                    "date": 1758245604886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n-\n+    //plotar\n     int array1[]: {1, 2, 5, 4, 9};\n     int array2[]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n-int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+    int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n \n \n \n"
                },
                {
                    "date": 1758245610021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n-    //plotar\n+    //plotar um gráfico que procura o 54\n     int array1[]: {1, 2, 5, 4, 9};\n     int array2[]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n"
                },
                {
                    "date": 1758245622059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n-    //plotar um gráfico que procura o 54\n+    //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[]: {1, 2, 5, 4, 9};\n-    int array2[]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n \n \n"
                },
                {
                    "date": 1758245630774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n-    int array1[]: {1, 2, 5, 4, 9};\n+    int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n+    \n \n \n \n \n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758245646261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,11 @@\n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n-    \n+    //plotar um gráfico que procura o 1(que é o ultimo elemento do vetor)\n \n \n \n \n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758245659162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,17 @@\n+\n+using nam\n+\n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n+    std\n+\n     //plotar um gráfico que procura o 1(que é o ultimo elemento do vetor)\n \n \n \n"
                },
                {
                    "date": 1758245669423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \n-using nam\n+using namespace std;\n+#include <iostream>\n \n void main(){\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n@@ -8,10 +9,10 @@\n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n-    std\n \n+\n     //plotar um gráfico que procura o 1(que é o ultimo elemento do vetor)\n \n \n \n"
                },
                {
                    "date": 1758245675026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,17 @@\n #include <iostream>\n \n void main(){\n     \n+    \n+    \n     //buscar o numero do meio com 3 vetores de N escalar\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n \n \n-\n     //plotar um gráfico que procura o 1(que é o ultimo elemento do vetor)\n \n \n \n"
                },
                {
                    "date": 1758245682115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n #include <iostream>\n \n void main(){\n     \n+    map<double, int>\n     \n-    \n     //buscar o numero do meio com 3 vetores de N escalar\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n"
                },
                {
                    "date": 1758245689549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n #include <iostream>\n \n void main(){\n     \n-    map<double, int>\n+    map<double, int> meio;\n+    map<double, int> ultimo;\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[] = {1, 2, 5, 4, 9};\n"
                },
                {
                    "date": 1758245696873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n #include <iostream>\n \n void main(){\n     \n-    map<double, int> meio;\n-    map<double, int> ultimo;\n+    map<double, int> meioSequencial;\n+    map<double, int> primeiro;\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[] = {1, 2, 5, 4, 9};\n"
                },
                {
                    "date": 1758245702779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n void main(){\n     \n     map<double, int> meioSequencial;\n-    map<double, int> primeiro;\n+    map<double, int> primeiroSequencial;\n     \n     //buscar o numero do meio com 3 vetores de N escalar\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[] = {1, 2, 5, 4, 9};\n"
                },
                {
                    "date": 1758245751263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n+    for(int i)\n \n-\n     //plotar um gráfico que procura o 1(que é o ultimo elemento do vetor)\n \n \n \n"
                },
                {
                    "date": 1758245760506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,11 @@\n     //plotar um gráfico que procura o 5 q está no meio do vetor \n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n-    for(int i)\n+    for(int i=1, i<3;i++){\n+        \n+    }\n \n     //plotar um gráfico que procura o 1(que é o ultimo elemento do vetor)\n \n \n"
                },
                {
                    "date": 1758245892086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,14 @@\n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n     for(int i=1, i<3;i++){\n-        \n+        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n+        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n+        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n+        meioSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n     //plotar um gráfico que procura o 1(que é o ultimo elemento do vetor)\n \n"
                },
                {
                    "date": 1758246523567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,81 @@\n+#include <iostream>\n+#include <map>\n+#include \"Funcoes.h\"\n \n using namespace std;\n-#include <iostream>\n \n-void main(){\n-    \n-    map<double, int> meioSequencial;\n-    map<double, int> primeiroSequencial;\n-    \n-    //buscar o numero do meio com 3 vetores de N escalar\n-    //plotar um gráfico que procura o 5 q está no meio do vetor \n-    int array1[] = {1, 2, 5, 4, 9};\n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n-    int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n-    for(int i=1, i<3;i++){\n+int main() {\n+    map<double,int> meioSequencial;\n+    map<double,int> primeiroSequencial;\n+\n+    map<double,int> meioBinaria;\n+    map<double,int> primeiroBinaria;\n+\n+    int array1[] = {1, 2, 5, 4, 9};                          \n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n+\n+    // --- Preenchendo os mapas ---\n\\ No newline at end of file\n+    for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n         double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n+\n         meioSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n         meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    //plotar um gráfico que procura o 1(que é o ultimo elemento do vetor)\n+    for(int i = 1; i < 3; i++){\n+        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n+        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n+        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n \n+        primeiroSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n \n+    for(int i = 1; i < 3; i++){\n+        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 5);\n+        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 5);\n+        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 5);\n \n+        meioBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        meioBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        meioBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n \n+    for(int i = 1; i < 3; i++){\n+        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 1);\n+        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 1);\n+        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 1);\n \n-}\n+        primeiroBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        primeiroBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        primeiroBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n+\n+    // --- Print dos 4 mapas ---\n+    cout << \"=== Meio Sequencial Inversa ===\\n\";\n+    for(auto &p : meioSequencial){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    cout << \"\\n=== Primeiro Sequencial Inversa ===\\n\";\n+    for(auto &p : primeiroSequencial){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    cout << \"\\n=== Meio Busca Binária ===\\n\";\n+    for(auto &p : meioBinaria){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    cout << \"\\n=== Primeiro Busca Binária ===\\n\";\n+    for(auto &p : primeiroBinaria){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    return 0;\n+}\n"
                },
                {
                    "date": 1758246765226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,78 +4,51 @@\n \n using namespace std;\n \n int main() {\n-    map<double,int> meioSequencial;\n-    map<double,int> primeiroSequencial;\n+    map<double,int> meioSequencial;       // Busca sequencial: número no meio\n+    map<double,int> primeiroSequencial;   // Busca sequencial: número no início\n+    map<double,int> meioBinaria;          // Busca binária: número no meio\n+    map<double,int> primeiroBinaria;      // Busca binária: número no início\n \n-    map<double,int> meioBinaria;\n-    map<double,int> primeiroBinaria;\n-\n-    int array1[] = {1, 2, 5, 4, 9};                          \n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n+    // --- Arrays de teste ---\n+    int array1[] = {1, 2, 5, 4, 9};\n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n-    // --- Preenchendo os mapas ---\n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n-        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n-        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n+    int* arrays[] = {array1, array2, array3};\n+    int tamanhos[] = {5, 10, 15};\n \n-        meioSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n-    }\n+    // --- Busca Sequencial Inversa ---\n+    for(int i = 0; i < 3; i++){\n+        double tempoMeio = medirTempo(buscaSequencialInversa, arrays[i], tamanhos[i], 5);\n+        double tempoPrimeiro = medirTempo(buscaSequencialInversa, arrays[i], tamanhos[i], 1);\n \n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n-        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n-        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n-\n-        primeiroSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+        meioSequencial[tempoMeio] = i + 1;\n+        primeiroSequencial[tempoPrimeiro] = i + 1;\n     }\n \n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 5);\n-        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 5);\n-        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 5);\n+    // --- Busca Binária ---\n+    for(int i = 0; i < 3; i++){\n+        double tempoMeio = medirTempo(buscaBinaria, arrays[i], tamanhos[i], 5);\n+        double tempoPrimeiro = medirTempo(buscaBinaria, arrays[i], tamanhos[i], 1);\n \n-        meioBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        meioBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        meioBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+        meioBinaria[tempoMeio] = i + 1;\n+        primeiroBinaria[tempoPrimeiro] = i + 1;\n     }\n \n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 1);\n-        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 1);\n-        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 1);\n+    // --- Impressão dos resultados ---\n+    auto printMap = [](const string& titulo, map<double,int>& m){\n+        cout << \"=== \" << titulo << \" ===\\n\";\n+        for(auto &p : m){\n+            cout << \"Tempo: \" << p.first << \" ms -> Array ID: \" << p.second << endl;\n+        }\n+        cout << endl;\n+    };\n\\ No newline at end of file\n \n-        primeiroBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        primeiroBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        primeiroBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n-    }\n+    printMap(\"Meio Sequencial Inversa\", meioSequencial);\n+    printMap(\"Primeiro Sequencial Inversa\", primeiroSequencial);\n+    printMap(\"Meio Busca Binária\", meioBinaria);\n+    printMap(\"Primeiro Busca Binária\", primeiroBinaria);\n \n-    // --- Print dos 4 mapas ---\n-    cout << \"=== Meio Sequencial Inversa ===\\n\";\n-    for(auto &p : meioSequencial){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Primeiro Sequencial Inversa ===\\n\";\n-    for(auto &p : primeiroSequencial){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Meio Busca Binária ===\\n\";\n-    for(auto &p : meioBinaria){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Primeiro Busca Binária ===\\n\";\n-    for(auto &p : primeiroBinaria){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n     return 0;\n-}\n+}\n"
                },
                {
                    "date": 1758246997883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n \n using namespace std;\n \n int main() {\n-    map<double,int> meioSequencial;       // Busca sequencial: número no meio\n     map<double,int> primeiroSequencial;   // Busca sequencial: número no início\n     map<double,int> meioBinaria;          // Busca binária: número no meio\n     map<double,int> primeiroBinaria;      // Busca binária: número no início\n \n@@ -50,5 +49,5 @@\n     printMap(\"Meio Busca Binária\", meioBinaria);\n     printMap(\"Primeiro Busca Binária\", primeiroBinaria);\n \n     return 0;\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1758247040664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n     // --- Arrays de teste ---\n     int array1[] = {1, 2, 5, 4, 9};\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n+        int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n+\n     int* arrays[] = {array1, array2, array3};\n     int tamanhos[] = {5, 10, 15};\n \n     // --- Busca Sequencial Inversa ---\n"
                },
                {
                    "date": 1758247045778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,52 +4,78 @@\n \n using namespace std;\n \n int main() {\n-    map<double,int> primeiroSequencial;   // Busca sequencial: número no início\n-    map<double,int> meioBinaria;          // Busca binária: número no meio\n-    map<double,int> primeiroBinaria;      // Busca binária: número no início\n+    map<double,int> meioSequencial;\n+    map<double,int> primeiroSequencial;\n \n-    // --- Arrays de teste ---\n-    int array1[] = {1, 2, 5, 4, 9};\n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    map<double,int> meioBinaria;\n+    map<double,int> primeiroBinaria;\n+\n+    int array1[] = {1, 2, 5, 4, 9};                          \n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n-        int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n+    // --- Preenchendo os mapas ---\n+    for(int i = 1; i < 3; i++){\n+        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n+        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n+        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n \n-    int* arrays[] = {array1, array2, array3};\n-    int tamanhos[] = {5, 10, 15};\n+        meioSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n \n-    // --- Busca Sequencial Inversa ---\n-    for(int i = 0; i < 3; i++){\n-        double tempoMeio = medirTempo(buscaSequencialInversa, arrays[i], tamanhos[i], 5);\n-        double tempoPrimeiro = medirTempo(buscaSequencialInversa, arrays[i], tamanhos[i], 1);\n+    for(int i = 1; i < 3; i++){\n+        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n+        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n+        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n \n-        meioSequencial[tempoMeio] = i + 1;\n-        primeiroSequencial[tempoPrimeiro] = i + 1;\n+        primeiroSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    // --- Busca Binária ---\n-    for(int i = 0; i < 3; i++){\n-        double tempoMeio = medirTempo(buscaBinaria, arrays[i], tamanhos[i], 5);\n-        double tempoPrimeiro = medirTempo(buscaBinaria, arrays[i], tamanhos[i], 1);\n+    for(int i = 1; i < 3; i++){\n+        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 5);\n+        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 5);\n+        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 5);\n \n-        meioBinaria[tempoMeio] = i + 1;\n-        primeiroBinaria[tempoPrimeiro] = i + 1;\n+        meioBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        meioBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        meioBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    // --- Impressão dos resultados ---\n-    auto printMap = [](const string& titulo, map<double,int>& m){\n-        cout << \"=== \" << titulo << \" ===\\n\";\n-        for(auto &p : m){\n-            cout << \"Tempo: \" << p.first << \" ms -> Array ID: \" << p.second << endl;\n-        }\n-        cout << endl;\n-    };\n+    for(int i = 1; i < 3; i++){\n+        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 1);\n+        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 1);\n+        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 1);\n \n-    printMap(\"Meio Sequencial Inversa\", meioSequencial);\n-    printMap(\"Primeiro Sequencial Inversa\", primeiroSequencial);\n-    printMap(\"Meio Busca Binária\", meioBinaria);\n-    printMap(\"Primeiro Busca Binária\", primeiroBinaria);\n+        primeiroBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        primeiroBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        primeiroBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n \n+    // --- Print dos 4 mapas ---\n+    cout << \"=== Meio Sequencial Inversa ===\\n\";\n+    for(auto &p : meioSequencial){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    cout << \"\\n=== Primeiro Sequencial Inversa ===\\n\";\n+    for(auto &p : primeiroSequencial){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    cout << \"\\n=== Meio Busca Binária ===\\n\";\n+    for(auto &p : meioBinaria){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    cout << \"\\n=== Primeiro Busca Binária ===\\n\";\n+    for(auto &p : primeiroBinaria){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n     return 0;\n }\n"
                },
                {
                    "date": 1758247078998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n \n using namespace std;\n \n int main() {\n-    map<double,int> meioSequencial;\n     map<double,int> primeiroSequencial;\n \n     map<double,int> meioBinaria;\n     map<double,int> primeiroBinaria;\n"
                },
                {
                    "date": 1758247094381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,26 +6,16 @@\n \n int main() {\n     map<double,int> primeiroSequencial;\n \n-    map<double,int> meioBinaria;\n     map<double,int> primeiroBinaria;\n \n     int array1[] = {1, 2, 5, 4, 9};                          \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n-    // --- Preenchendo os mapas ---\n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n-        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n-        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n+   \n \n-        meioSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n-    }\n-\n     for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n         double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n"
                },
                {
                    "date": 1758247104498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,17 +5,17 @@\n using namespace std;\n \n int main() {\n     map<double,int> primeiroSequencial;\n-\n     map<double,int> primeiroBinaria;\n \n     int array1[] = {1, 2, 5, 4, 9};                          \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n+        int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n+\n    \n-\n     for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n         double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n"
                },
                {
                    "date": 1758247110961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,13 @@\n \n     int array1[] = {1, 2, 5, 4, 9};                          \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n-        int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n \n+\n    \n     for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n"
                },
                {
                    "date": 1758247116734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     int array1[] = {1, 2, 5, 4, 9};                          \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3 3, 3, 3, 3, 3, 3, 3, 3,3 ,3 3, 3, 3,3 };\n \n \n \n    \n"
                },
                {
                    "date": 1758247126401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     int array1[] = {1, 2, 5, 4, 9};                          \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3 3, 3, 3, 3, 3, 3, 3, 3,3 ,3 3, 3, 3,3 };\n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3 3, 3, 3, 3, 3, 3, 3, 3,3 ,3 3, 3, 3,3};\n \n \n \n    \n"
                },
                {
                    "date": 1758247254519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,13 @@\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3 3, 3, 3, 3, 3, 3, 3, 3,3 ,3 3, 3, 3,3};\n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3 3, 3, 3, 3, 3, 3, 3, 3,3 ,3 3, 3, 3,3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, };\n \n \n \n+\n    \n     for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n"
                },
                {
                    "date": 1758247362538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,51 @@\n #include <iostream>\n #include <map>\n+#include <algorithm> // para std::sort\n #include \"Funcoes.h\"\n \n using namespace std;\n \n int main() {\n     map<double,int> primeiroSequencial;\n     map<double,int> primeiroBinaria;\n \n-    int array1[] = {1, 2, 5, 4, 9};                          \n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n+    // --- Arrays para teste ---\n+    int array1[] = {1, 2, 5, 4, 9};\n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3 3, 3, 3, 3, 3, 3, 3, 3,3 ,3 3, 3, 3,3};\n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3 3, 3, 3, 3, 3, 3, 3, 3,3 ,3 3, 3, 3,3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, };\n+    int array4[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3};\n+    int array5[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,4,4,4,4,4,4,4,4,4,4,2,2,2,2};\n \n+    int* arrays[] = {array1, array2, array3, array4, array5};\n+    int tamanhos[] = {5, 10, 15, 30, 30};\n \n-\n-\n-   \n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n-        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n-        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n-\n-        primeiroSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    // --- Sequencial Inversa: primeiro elemento (1) ---\n+    for(int i = 0; i < 5; i++){\n+        double tempo = medirTempo(buscaSequencialInversa, arrays[i], tamanhos[i], 1);\n+        primeiroSequencial[tempo] = tamanhos[i];\n     }\n \n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 5);\n-        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 5);\n-        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 5);\n-\n-        meioBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        meioBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        meioBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    // --- Ordena arrays antes da busca binária ---\n+    for(int i = 0; i < 5; i++){\n+        sort(arrays[i], arrays[i] + tamanhos[i]);\n     }\n \n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 1);\n-        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 1);\n-        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 1);\n-\n-        primeiroBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        primeiroBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        primeiroBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    // --- Busca Binária: elemento não existente (-1) para pior caso ---\n+    for(int i = 0; i < 5; i++){\n+        double tempo = medirTempo(buscaBinaria, arrays[i], tamanhos[i], -1);\n+        primeiroBinaria[tempo] = tamanhos[i];\n     }\n \n-    // --- Print dos 4 mapas ---\n-    cout << \"=== Meio Sequencial Inversa ===\\n\";\n-    for(auto &p : meioSequencial){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Primeiro Sequencial Inversa ===\\n\";\n+    // --- Print dos resultados ---\n+    cout << \"\\n=== Primeiro Sequencial Inversa (Pior Caso) ===\\n\";\n     for(auto &p : primeiroSequencial){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+        cout << \"Tempo: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n     }\n \n-    cout << \"\\n=== Meio Busca Binária ===\\n\";\n-    for(auto &p : meioBinaria){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Primeiro Busca Binária ===\\n\";\n+    cout << \"\\n=== Busca Binária (Pior Caso) ===\\n\";\n     for(auto &p : primeiroBinaria){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+        cout << \"Tempo: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n     }\n \n     return 0;\n }\n"
                },
                {
                    "date": 1758247802421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,45 +5,41 @@\n \n using namespace std;\n \n int main() {\n+    // Maps para armazenar tempos\n     map<double,int> primeiroSequencial;\n     map<double,int> primeiroBinaria;\n \n-    // --- Arrays para teste ---\n-    int array1[] = {1, 2, 5, 4, 9};\n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n+    // Arrays de teste\n+    int array1[] = {1, 2, 5, 4, 9};                          \n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n-    int array4[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14, 3,3,3,3,3,3,3,3,3,3,3,3,3,3,3};\n-    int array5[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,4,4,4,4,4,4,4,4,4,4,2,2,2,2};\n \n-    int* arrays[] = {array1, array2, array3, array4, array5};\n-    int tamanhos[] = {5, 10, 15, 30, 30};\n+    int* arrays[] = {array1, array2, array3};\n+    int tamanhos[] = {5, 10, 15};\n \n-    // --- Sequencial Inversa: primeiro elemento (1) ---\n-    for(int i = 0; i < 5; i++){\n+    // --- BUSCA SEQUENCIAL INVERSA (pior caso: elemento 1, último) ---\n+    for(int i = 0; i < 3; i++){\n         double tempo = medirTempo(buscaSequencialInversa, arrays[i], tamanhos[i], 1);\n         primeiroSequencial[tempo] = tamanhos[i];\n     }\n \n-    // --- Ordena arrays antes da busca binária ---\n-    for(int i = 0; i < 5; i++){\n+    // --- BUSCA BINÁRIA (pior caso: elemento 1, menor, primeiro da ordenação) ---\n+    for(int i = 0; i < 3; i++){\n+        // Ordenar antes de buscar\n         sort(arrays[i], arrays[i] + tamanhos[i]);\n-    }\n-\n-    // --- Busca Binária: elemento não existente (-1) para pior caso ---\n-    for(int i = 0; i < 5; i++){\n-        double tempo = medirTempo(buscaBinaria, arrays[i], tamanhos[i], -1);\n+        double tempo = medirTempo(buscaBinaria, arrays[i], tamanhos[i], 1);\n         primeiroBinaria[tempo] = tamanhos[i];\n     }\n \n-    // --- Print dos resultados ---\n+    // --- PRINT DOS RESULTADOS ---\n     cout << \"\\n=== Primeiro Sequencial Inversa (Pior Caso) ===\\n\";\n     for(auto &p : primeiroSequencial){\n         cout << \"Tempo: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n     }\n \n-    cout << \"\\n=== Busca Binária (Pior Caso) ===\\n\";\n+    cout << \"\\n=== Primeiro Busca Binária (Pior Caso) ===\\n\";\n     for(auto &p : primeiroBinaria){\n         cout << \"Tempo: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n     }\n \n"
                },
                {
                    "date": 1758248114167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,59 @@\n #include <iostream>\n #include <map>\n-#include <algorithm> // para std::sort\n+#include <algorithm>\n #include \"Funcoes.h\"\n \n using namespace std;\n \n int main() {\n-    // Maps para armazenar tempos\n     map<double,int> primeiroSequencial;\n     map<double,int> primeiroBinaria;\n \n-    // Arrays de teste\n-    int array1[] = {1, 2, 5, 4, 9};                          \n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n+    // --- Criando arrays maiores ---\n+    int array1[200], array2[300], array3[400];\n \n-    int* arrays[] = {array1, array2, array3};\n-    int tamanhos[] = {5, 10, 15};\n+    // Preenchendo arrays sequencialmente\n+    for(int i = 0; i < 200; i++) array1[i] = i+1;\n+    for(int i = 0; i < 300; i++) array2[i] = i+1;\n+    for(int i = 0; i < 400; i++) array3[i] = i+1;\n \n-    // --- BUSCA SEQUENCIAL INVERSA (pior caso: elemento 1, último) ---\n-    for(int i = 0; i < 3; i++){\n-        double tempo = medirTempo(buscaSequencialInversa, arrays[i], tamanhos[i], 1);\n-        primeiroSequencial[tempo] = tamanhos[i];\n-    }\n+    // --- Medindo tempo de Busca Sequencial Inversa (pior caso) ---\n+    int repeticoes = 100; // média sobre 100 execuções\n \n-    // --- BUSCA BINÁRIA (pior caso: elemento 1, menor, primeiro da ordenação) ---\n-    for(int i = 0; i < 3; i++){\n-        // Ordenar antes de buscar\n-        sort(arrays[i], arrays[i] + tamanhos[i]);\n-        double tempo = medirTempo(buscaBinaria, arrays[i], tamanhos[i], 1);\n-        primeiroBinaria[tempo] = tamanhos[i];\n-    }\n+    auto medirMedia = [&](auto func, int arr[], int tamanho, int elemento) {\n+        double soma = 0;\n+        for(int i = 0; i < repeticoes; i++)\n+            soma += medirTempo(func, arr, tamanho, elemento);\n+        return soma / repeticoes;\n+    };\n \n-    // --- PRINT DOS RESULTADOS ---\n+    double t1 = medirMedia(buscaSequencialInversa, array1, 200, 200);\n+    double t2 = medirMedia(buscaSequencialInversa, array2, 300, 300);\n+    double t3 = medirMedia(buscaSequencialInversa, array3, 400, 400);\n+\n+    primeiroSequencial[t1] = 200;\n+    primeiroSequencial[t2] = 300;\n+    primeiroSequencial[t3] = 400;\n+\n+    // --- Preparando arrays para busca binária ---\n+    // já estão ordenados, então podemos usar diretamente\n+\n+    t1 = medirMedia(buscaBinaria, array1, 200, 200);\n+    t2 = medirMedia(buscaBinaria, array2, 300, 300);\n+    t3 = medirMedia(buscaBinaria, array3, 400, 400);\n+\n+    primeiroBinaria[t1] = 200;\n+    primeiroBinaria[t2] = 300;\n+    primeiroBinaria[t3] = 400;\n+\n+    // --- Print ---\n     cout << \"\\n=== Primeiro Sequencial Inversa (Pior Caso) ===\\n\";\n-    for(auto &p : primeiroSequencial){\n+    for(auto &p : primeiroSequencial)\n         cout << \"Tempo: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n-    }\n \n     cout << \"\\n=== Primeiro Busca Binária (Pior Caso) ===\\n\";\n-    for(auto &p : primeiroBinaria){\n+    for(auto &p : primeiroBinaria)\n         cout << \"Tempo: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n-    }\n \n     return 0;\n }\n"
                },
                {
                    "date": 1758248336967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n #include <iostream>\n #include <map>\n+#include <vector>\n #include <algorithm>\n #include \"Funcoes.h\"\n \n using namespace std;\n@@ -8,52 +9,49 @@\n int main() {\n     map<double,int> primeiroSequencial;\n     map<double,int> primeiroBinaria;\n \n-    // --- Criando arrays maiores ---\n-    int array1[200], array2[300], array3[400];\n+    // Tamanhos grandes\n+    vector<int> tamanhos = {1000, 5000, 10000};\n \n-    // Preenchendo arrays sequencialmente\n-    for(int i = 0; i < 200; i++) array1[i] = i+1;\n-    for(int i = 0; i < 300; i++) array2[i] = i+1;\n-    for(int i = 0; i < 400; i++) array3[i] = i+1;\n+    // Repetições para média\n+    int repeticoes = 10;\n \n-    // --- Medindo tempo de Busca Sequencial Inversa (pior caso) ---\n-    int repeticoes = 100; // média sobre 100 execuções\n+    for(int n : tamanhos){\n+        // --- Criando arrays ---\n+        vector<int> arrSeq(n);\n+        vector<int> arrBin(n);\n \n-    auto medirMedia = [&](auto func, int arr[], int tamanho, int elemento) {\n-        double soma = 0;\n-        for(int i = 0; i < repeticoes; i++)\n-            soma += medirTempo(func, arr, tamanho, elemento);\n-        return soma / repeticoes;\n-    };\n+        for(int i=0; i<n; i++){\n+            arrSeq[i] = i + 1;\n+            arrBin[i] = i + 1;\n+        }\n \n-    double t1 = medirMedia(buscaSequencialInversa, array1, 200, 200);\n-    double t2 = medirMedia(buscaSequencialInversa, array2, 300, 300);\n-    double t3 = medirMedia(buscaSequencialInversa, array3, 400, 400);\n+        // --- Sequencial inversa (pior caso: último elemento) ---\n+        double somaTempoSeq = 0;\n+        for(int r=0; r<repeticoes; r++){\n+            somaTempoSeq += medirTempo(buscaSequencialInversa, arrSeq.data(), n, 1);\n+        }\n+        primeiroSequencial[somaTempoSeq/repeticoes] = n;\n \n-    primeiroSequencial[t1] = 200;\n-    primeiroSequencial[t2] = 300;\n-    primeiroSequencial[t3] = 400;\n+        // --- Busca binária (pior caso: primeiro elemento) ---\n+        double somaTempoBin = 0;\n+        for(int r=0; r<repeticoes; r++){\n+            somaTempoBin += medirTempo(buscaBinaria, arrBin.data(), n, 1);\n+        }\n+        primeiroBinaria[somaTempoBin/repeticoes] = n;\n+    }\n \n-    // --- Preparando arrays para busca binária ---\n-    // já estão ordenados, então podemos usar diretamente\n-\n-    t1 = medirMedia(buscaBinaria, array1, 200, 200);\n-    t2 = medirMedia(buscaBinaria, array2, 300, 300);\n-    t3 = medirMedia(buscaBinaria, array3, 400, 400);\n-\n-    primeiroBinaria[t1] = 200;\n-    primeiroBinaria[t2] = 300;\n-    primeiroBinaria[t3] = 400;\n-\n-    // --- Print ---\n+    // --- Print Sequencial ---\n     cout << \"\\n=== Primeiro Sequencial Inversa (Pior Caso) ===\\n\";\n-    for(auto &p : primeiroSequencial)\n-        cout << \"Tempo: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n+    for(auto &p : primeiroSequencial){\n+        cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n+    }\n \n+    // --- Print Binária ---\n     cout << \"\\n=== Primeiro Busca Binária (Pior Caso) ===\\n\";\n-    for(auto &p : primeiroBinaria)\n-        cout << \"Tempo: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n+    for(auto &p : primeiroBinaria){\n+        cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n+    }\n \n     return 0;\n }\n"
                },
                {
                    "date": 1758248489318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,45 @@\n #include <iostream>\n #include <map>\n-#include <vector>\n #include <algorithm>\n #include \"Funcoes.h\"\n \n using namespace std;\n \n int main() {\n-    map<double,int> primeiroSequencial;\n-    map<double,int> primeiroBinaria;\n+    // Mapas para armazenar tempo médio\n+    map<double, int> primeiroSequencial;\n+    map<double, int> primeiroBinaria;\n \n-    // Tamanhos grandes\n-    vector<int> tamanhos = {1000, 5000, 10000};\n+    // Arrays de diferentes tamanhos\n+    int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n \n-    // Repetições para média\n-    int repeticoes = 10;\n+    // Criando e preenchendo os arrays dinamicamente\n+    for(int i = 0; i < 6; i++){\n+        int n = tamanhos[i];\n+        int* array = new int[n];\n+        for(int j = 0; j < n; j++){\n+            array[j] = j + 1;  // Elementos ordenados\n+        }\n \n-    for(int n : tamanhos){\n-        // --- Criando arrays ---\n-        vector<int> arrSeq(n);\n-        vector<int> arrBin(n);\n+        // --- Sequencial Inversa (pior caso: último elemento) ---\n+        double tempoSeq = medirTempo(buscaSequencialInversa, array, n, 1);\n+        primeiroSequencial[tempoSeq] = n;\n \n-        for(int i=0; i<n; i++){\n-            arrSeq[i] = i + 1;\n-            arrBin[i] = i + 1;\n-        }\n+        // --- Busca Binária (pior caso: elemento no início ou fim) ---\n+        // Array já ordenado\n+        double tempoBin = medirTempo(buscaBinaria, array, n, 1);\n+        primeiroBinaria[tempoBin] = n;\n \n-        // --- Sequencial inversa (pior caso: último elemento) ---\n-        double somaTempoSeq = 0;\n-        for(int r=0; r<repeticoes; r++){\n-            somaTempoSeq += medirTempo(buscaSequencialInversa, arrSeq.data(), n, 1);\n-        }\n-        primeiroSequencial[somaTempoSeq/repeticoes] = n;\n-\n-        // --- Busca binária (pior caso: primeiro elemento) ---\n-        double somaTempoBin = 0;\n-        for(int r=0; r<repeticoes; r++){\n-            somaTempoBin += medirTempo(buscaBinaria, arrBin.data(), n, 1);\n-        }\n-        primeiroBinaria[somaTempoBin/repeticoes] = n;\n+        delete[] array; // liberar memória\n     }\n \n-    // --- Print Sequencial ---\n+    // --- Print dos resultados ---\n     cout << \"\\n=== Primeiro Sequencial Inversa (Pior Caso) ===\\n\";\n     for(auto &p : primeiroSequencial){\n         cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n     }\n \n-    // --- Print Binária ---\n     cout << \"\\n=== Primeiro Busca Binária (Pior Caso) ===\\n\";\n     for(auto &p : primeiroBinaria){\n         cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n     }\n"
                },
                {
                    "date": 1758248770164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,10 @@\n \n         delete[] array; // liberar memória\n     }\n \n+    //no geral o que ocorre é que \n+\n     // --- Print dos resultados ---\n     cout << \"\\n=== Primeiro Sequencial Inversa (Pior Caso) ===\\n\";\n     for(auto &p : primeiroSequencial){\n         cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n"
                },
                {
                    "date": 1758248877753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n #include <iostream>\n #include <map>\n+#include <fstream>\n #include <algorithm>\n #include \"Funcoes.h\"\n \n using namespace std;\n@@ -25,17 +26,14 @@\n         double tempoSeq = medirTempo(buscaSequencialInversa, array, n, 1);\n         primeiroSequencial[tempoSeq] = n;\n \n         // --- Busca Binária (pior caso: elemento no início ou fim) ---\n-        // Array já ordenado\n         double tempoBin = medirTempo(buscaBinaria, array, n, 1);\n         primeiroBinaria[tempoBin] = n;\n \n         delete[] array; // liberar memória\n     }\n \n-    //no geral o que ocorre é que \n-\n     // --- Print dos resultados ---\n     cout << \"\\n=== Primeiro Sequencial Inversa (Pior Caso) ===\\n\";\n     for(auto &p : primeiroSequencial){\n         cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n@@ -45,6 +43,23 @@\n     for(auto &p : primeiroBinaria){\n         cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n     }\n \n+    // --- Criando CSVs para gerar gráficos ---\n+    ofstream arquivoSeq(\"tempos_sequencial.csv\");\n+    arquivoSeq << \"TamanhoArray,TempoSequencial\\n\";\n+    for(auto &p : primeiroSequencial){\n+        arquivoSeq << p.second << \",\" << p.first << \"\\n\";\n+    }\n+    arquivoSeq.close();\n+\n+    ofstream arquivoBin(\"tempos_binaria.csv\");\n+    arquivoBin << \"TamanhoArray,TempoBinaria\\n\";\n+    for(auto &p : primeiroBinaria){\n+        arquivoBin << p.second << \",\" << p.first << \"\\n\";\n+    }\n+    arquivoBin.close();\n+\n+    cout << \"\\nCSVs gerados: tempos_sequencial.csv e tempos_binaria.csv\\n\";\n+\n     return 0;\n }\n"
                },
                {
                    "date": 1758249368682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,60 +6,16 @@\n \n using namespace std;\n \n int main() {\n-    // Mapas para armazenar tempo médio\n-    map<double, int> primeiroSequencial;\n-    map<double, int> primeiroBinaria;\n-\n-    // Arrays de diferentes tamanhos\n     int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n+    int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n+    int elementoPiorCaso = 1; // último elemento para sequencial inversa e binária\n \n-    // Criando e preenchendo os arrays dinamicamente\n-    for(int i = 0; i < 6; i++){\n-        int n = tamanhos[i];\n-        int* array = new int[n];\n-        for(int j = 0; j < n; j++){\n-            array[j] = j + 1;  // Elementos ordenados\n-        }\n+    // Testar busca sequencial inversa\n+    testarAlgoritmo(\"tempos_sequencial.csv\", buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n \n-        // --- Sequencial Inversa (pior caso: último elemento) ---\n-        double tempoSeq = medirTempo(buscaSequencialInversa, array, n, 1);\n-        primeiroSequencial[tempoSeq] = n;\n+    // Testar busca binária\n+    testarAlgoritmo(\"tempos_binaria.csv\", buscaBinaria, tamanhos, qtdTamanhos, elementoPiorCaso);\n \n-        // --- Busca Binária (pior caso: elemento no início ou fim) ---\n-        double tempoBin = medirTempo(buscaBinaria, array, n, 1);\n-        primeiroBinaria[tempoBin] = n;\n-\n-        delete[] array; // liberar memória\n-    }\n-\n-    // --- Print dos resultados ---\n-    cout << \"\\n=== Primeiro Sequencial Inversa (Pior Caso) ===\\n\";\n-    for(auto &p : primeiroSequencial){\n-        cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Primeiro Busca Binária (Pior Caso) ===\\n\";\n-    for(auto &p : primeiroBinaria){\n-        cout << \"Tempo médio: \" << p.first << \" ms -> Tamanho do Array: \" << p.second << endl;\n-    }\n-\n-    // --- Criando CSVs para gerar gráficos ---\n-    ofstream arquivoSeq(\"tempos_sequencial.csv\");\n-    arquivoSeq << \"TamanhoArray,TempoSequencial\\n\";\n-    for(auto &p : primeiroSequencial){\n-        arquivoSeq << p.second << \",\" << p.first << \"\\n\";\n-    }\n-    arquivoSeq.close();\n-\n-    ofstream arquivoBin(\"tempos_binaria.csv\");\n-    arquivoBin << \"TamanhoArray,TempoBinaria\\n\";\n-    for(auto &p : primeiroBinaria){\n-        arquivoBin << p.second << \",\" << p.first << \"\\n\";\n-    }\n-    arquivoBin.close();\n-\n-    cout << \"\\nCSVs gerados: tempos_sequencial.csv e tempos_binaria.csv\\n\";\n-\n     return 0;\n-}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758249376714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,14 +8,11 @@\n \n int main() {\n     int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n     int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n-    int elementoPiorCaso = 1; // último elemento para sequencial inversa e binária\n+    int elementoPiorCaso = 1; \n \n-    // Testar busca sequencial inversa\n     testarAlgoritmo(\"tempos_sequencial.csv\", buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n-\n-    // Testar busca binária\n     testarAlgoritmo(\"tempos_binaria.csv\", buscaBinaria, tamanhos, qtdTamanhos, elementoPiorCaso);\n \n     return 0;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758249874098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,20 @@\n \n using namespace std;\n \n int main() {\n-    int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n-    int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n-    int elementoPiorCaso = 1; \n+    int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n+    int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n+    int elementoPiorCaso = 1;\n \n-    testarAlgoritmo(\"tempos_sequencial.csv\", buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n-    testarAlgoritmo(\"tempos_binaria.csv\", buscaBinaria, tamanhos, qtdTamanhos, elementoPiorCaso);\n+    // --- Teste e plot para Busca Sequencial Inversa ---\n+    cout << \"Testando Busca Sequencial Inversa...\\n\";\n+    map<int, double> temposSequencial = testarAlgoritmo(buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n+    gerarGrafico(\"Busca Sequencial Inversa (Pior Caso)\", temposSequencial);\n \n-    return 0;\n+    // --- Teste e plot para Busca Binária ---\n+    cout << \"\\nTestando Busca Binaria...\\n\";\n+    map<int, double> temposBinaria = testarAlgoritmo(buscaBinaria, tamanhos, qtdTamanhos, elementoPiorCaso);\n+    gerarGrafico(\"Busca Binaria (Pior Caso)\", temposBinaria);\n+\n+    return 0;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758249923167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n using namespace std;\n \n int main() {\n-    int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n+int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n     int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n     int elementoPiorCaso = 1;\n \n     // --- Teste e plot para Busca Sequencial Inversa ---\n"
                },
                {
                    "date": 1758249928762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n using namespace std;\n \n int main() {\n int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n-    int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n-    int elementoPiorCaso = 1;\n+int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n+    int elementoPiorCaso = 1;\n \n     // --- Teste e plot para Busca Sequencial Inversa ---\n     cout << \"Testando Busca Sequencial Inversa...\\n\";\n     map<int, double> temposSequencial = testarAlgoritmo(buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n"
                },
                {
                    "date": 1758249936208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,14 @@\n \n using namespace std;\n \n int main() {\n-int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n-int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n+    int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n+    int qtdTamanhos = sizeof(tamanhos)/sizeof(tamanhos[0]);\n     int elementoPiorCaso = 1;\n \n     // --- Teste e plot para Busca Sequencial Inversa ---\n-    cout << \"Testando Busca Sequencial Inversa...\\n\";\n+cout << \"Testando Busca Sequencial Inversa...\\n\";\n     map<int, double> temposSequencial = testarAlgoritmo(buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n     gerarGrafico(\"Busca Sequencial Inversa (Pior Caso)\", temposSequencial);\n \n     // --- Teste e plot para Busca Binária ---\n"
                },
                {
                    "date": 1758249942116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,14 +12,14 @@\n     int elementoPiorCaso = 1;\n \n     // --- Teste e plot para Busca Sequencial Inversa ---\n cout << \"Testando Busca Sequencial Inversa...\\n\";\n-    map<int, double> temposSequencial = testarAlgoritmo(buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n-    gerarGrafico(\"Busca Sequencial Inversa (Pior Caso)\", temposSequencial);\n+map<int, double> temposSequencial = testarAlgoritmo(buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n+gerarGrafico(\"Busca Sequencial Inversa (Pior Caso)\", temposSequencial);\n \n     // --- Teste e plot para Busca Binária ---\n-    cout << \"\\nTestando Busca Binaria...\\n\";\n-    map<int, double> temposBinaria = testarAlgoritmo(buscaBinaria, tamanhos, qtdTamanhos, elementoPiorCaso);\n+cout << \"\\nTestando Busca Binaria...\\n\";\n+map<int, double> temposBinaria = testarAlgoritmo(buscaBinaria, tamanhos, qtdTamanhos, elementoPiorCaso);\n     gerarGrafico(\"Busca Binaria (Pior Caso)\", temposBinaria);\n \n     return 0;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758249953285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,10 @@\n map<int, double> temposSequencial = testarAlgoritmo(buscaSequencialInversa, tamanhos, qtdTamanhos, elementoPiorCaso);\n gerarGrafico(\"Busca Sequencial Inversa (Pior Caso)\", temposSequencial);\n \n     // --- Teste e plot para Busca Binária ---\n-cout << \"\\nTestando Busca Binaria...\\n\";\n-map<int, double> temposBinaria = testarAlgoritmo(buscaBinaria, tamanhos, qtdTamanhos, elementoPiorCaso);\n-    gerarGrafico(\"Busca Binaria (Pior Caso)\", temposBinaria);\n+    cout << \"\\nTestando Busca Binaria...\\n\";\n+    map<int, double> temposBinaria = testarAlgoritmo(buscaBinaria, tamanhos, qtdTamanhos, elementoPiorCaso);\n+    gerarGrafico(\"Busca Binaria (Pior Caso)\", temposBinaria);\n \n-    return 0;\n+    return 0;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758250042481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n #include <map>\n #include <fstream>\n #include <algorithm>\n #include \"Funcoes.h\"\n+#include \"matplotlibcpp.h\"\n \n-\n using namespace std;\n \n int main() {\n     int tamanhos[] = {1000, 2000, 5000, 10000, 20000, 50000};\n"
                }
            ],
            "date": 1758244304857,
            "name": "Commit-0",
            "content": "void main(){\n    \n}"
        }
    ]
}