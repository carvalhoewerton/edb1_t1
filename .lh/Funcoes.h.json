{
    "sourceFile": "Funcoes.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 50,
            "patches": [
                {
                    "date": 1758156830798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758156834116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n #ifndef FUNCOES_H\n #define FUNCOES_H\n \n-// Busca sequencial recursiva\n int buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n \n-// Busca binária (vetor já ordenado)\n int buscaBinaria(int v[], int n, int x);\n \n #endif\n"
                },
                {
                    "date": 1758157181163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,6 @@\n \n int buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n \n int buscaBinaria(int v[], int n, int x);\n-\n+double medirTempo(Func func, Args... args)\n #endif\n"
                },
                {
                    "date": 1758157189011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,6 +3,6 @@\n \n int buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n \n int buscaBinaria(int v[], int n, int x);\n-double medirTempo(Func func, Args... args)\n+\n #endif\n"
                },
                {
                    "date": 1758157222704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n #ifndef FUNCOES_H\n #define FUNCOES_H\n \n+// Busca sequencial recursiva\n int buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n \n int buscaBinaria(int v[], int n, int x);\n \n"
                },
                {
                    "date": 1758157238035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n #ifndef FUNCOES_H\n #define FUNCOES_H\n \n-// Busca sequencial recursiva\n int buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n-\n int buscaBinaria(int v[], int n, int x);\n \n #endif\n"
                },
                {
                    "date": 1758157384912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,5 +3,6 @@\n \n int buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n int buscaBinaria(int v[], int n, int x);\n \n+\n #endif\n"
                },
                {
                    "date": 1758157421347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,15 @@\n #define FUNCOES_H\n \n int buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n int buscaBinaria(int v[], int n, int x);\n+template <typename Func, typename... Args>\n+double medirTempo(Func func, Args... args) {\n+    auto inicio = std::chrono::high_resolution_clock::now();\n+    func(args...);\n+    auto fim = std::chrono::high_resolution_clock::now();\n \n+    std::chrono::duration<double, std::milli> duracao = fim - inicio;\n+    return duracao.count();\n+}\n \n #endif\n"
                },
                {
                    "date": 1758227309395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n #ifndef FUNCOES_H\n #define FUNCOES_H\n \n-int buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n+int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n+\n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n     auto inicio = std::chrono::high_resolution_clock::now();\n     func(args...);\n"
                },
                {
                    "date": 1758228050864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,5 +13,7 @@\n     std::chrono::duration<double, std::milli> duracao = fim - inicio;\n     return duracao.count();\n }\n \n+\n+\n #endif\n"
                },
                {
                    "date": 1758228056848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,7 @@\n     std::chrono::duration<double, std::milli> duracao = fim - inicio;\n     return duracao.count();\n }\n \n+//faz 5 casos diferente \n \n-\n #endif\n"
                },
                {
                    "date": 1758228068307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,8 @@\n     std::chrono::duration<double, std::milli> duracao = fim - inicio;\n     return duracao.count();\n }\n \n-//faz 5 casos diferente \n+//faz 5 casos diferente de busca \n+//faz uma media no final \n \n #endif\n"
                },
                {
                    "date": 1758228076958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,8 @@\n     std::chrono::duration<double, std::milli> duracao = fim - inicio;\n     return duracao.count();\n }\n \n-//faz 5 casos diferente de busca \n+//faz 5 casos diferente de busca para buscabinaria e sequencial\n //faz uma media no final \n \n #endif\n"
                },
                {
                    "date": 1758228083101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,6 +15,7 @@\n }\n \n //faz 5 casos diferente de busca para buscabinaria e sequencial\n //faz uma media no final \n+//plota um gráfico\n \n #endif\n"
                },
                {
                    "date": 1758228124700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,7 +15,7 @@\n }\n \n //faz 5 casos diferente de busca para buscabinaria e sequencial\n //faz uma media no final \n-//plota um gráfico\n+//plota um gráfico de tamanho de n/tempo de execução\n \n #endif\n"
                },
                {
                    "date": 1758246092472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,50 @@\n-#ifndef FUNCOES_H\n-#define FUNCOES_H\n+#include <iostream>\n+#include <map>\n+#include \"Funcoes.h\"\n \n-int buscaSequencialInversa(int v[], int n, int x);\n-int buscaBinaria(int v[], int n, int x);\n+using namespace std;\n \n-template <typename Func, typename... Args>\n-double medirTempo(Func func, Args... args) {\n-    auto inicio = std::chrono::high_resolution_clock::now();\n-    func(args...);\n-    auto fim = std::chrono::high_resolution_clock::now();\n+int main() {\n+    map<double,int> meioSequencial;\n+    map<double,int> primeiroSequencial;\n \n-    std::chrono::duration<double, std::milli> duracao = fim - inicio;\n-    return duracao.count();\n-}\n+    // Arrays com o 5 sempre no meio\n+    int array1[] = {1, 2, 5, 4, 9};                           // tamanho 5, 5 no índice 2\n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};           // tamanho 10, 5 no índice 4\n+    int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15}; // tamanho 16, 5 no índice 6\n \n-//faz 5 casos diferente de busca para buscabinaria e sequencial\n-//faz uma media no final \n-//plota um gráfico de tamanho de n/tempo de execução\n+    // --- Elemento do meio ---\n+    for(int i = 0; i < 3; i++){\n+        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n+        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n+        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n \n-#endif\n+        meioSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n+\n+    // --- Elemento do início (primeiro) ---\n+    for(int i = 0; i < 3; i++){\n+        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n+        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n+        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n+\n+        primeiroSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n+\n+    // --- Imprimir resultados ---\n+    cout << \"Tempo (ms) - elemento do meio:\\n\";\n+    for(auto &p : meioSequencial){\n+        cout << \"Tamanho: \" << p.second << \" -> Tempo: \" << p.first << \" ms\\n\";\n+    }\n+\n+    cout << \"\\nTempo (ms) - elemento do primeiro:\\n\";\n+    for(auto &p : primeiroSequencial){\n+        cout << \"Tamanho: \" << p.second << \" -> Tempo: \" << p.first << \" ms\\n\";\n+    }\n+\n+    return 0;\n+}\n"
                },
                {
                    "date": 1758246127435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n     // Arrays com o 5 sempre no meio\n     int array1[] = {1, 2, 5, 4, 9};                           // tamanho 5, 5 no índice 2\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};           // tamanho 10, 5 no índice 4\n-    int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15}; // tamanho 16, 5 no índice 6\n+    int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n \n     // --- Elemento do meio ---\n     for(int i = 0; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n"
                },
                {
                    "date": 1758246133269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n     // Arrays com o 5 sempre no meio\n     int array1[] = {1, 2, 5, 4, 9};                           // tamanho 5, 5 no índice 2\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};           // tamanho 10, 5 no índice 4\n-    int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n+    int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 5, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n \n     // --- Elemento do meio ---\n     for(int i = 0; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n"
                },
                {
                    "date": 1758246188509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n     // Arrays com o 5 sempre no meio\n     int array1[] = {1, 2, 5, 4, 9};                           // tamanho 5, 5 no índice 2\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};           // tamanho 10, 5 no índice 4\n-    int array3[] = {1, 2, 3, 4, 20, 6, 5, 7, 8, 5, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 5, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n \n     // --- Elemento do meio ---\n     for(int i = 0; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n"
                },
                {
                    "date": 1758246327821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n     // Arrays com o 5 sempre no meio\n     int array1[] = {1, 2, 5, 4, 9};                           // tamanho 5, 5 no índice 2\n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};           // tamanho 10, 5 no índice 4\n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 5, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n \n     // --- Elemento do meio ---\n     for(int i = 0; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n@@ -23,9 +23,8 @@\n         meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    // --- Elemento do início (primeiro) ---\n     for(int i = 0; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n         double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n"
                },
                {
                    "date": 1758246337869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,14 +7,12 @@\n int main() {\n     map<double,int> meioSequencial;\n     map<double,int> primeiroSequencial;\n \n-    // Arrays com o 5 sempre no meio\n-    int array1[] = {1, 2, 5, 4, 9};                           // tamanho 5, 5 no índice 2\n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};           // tamanho 10, 5 no índice 4\n+    int array1[] = {1, 2, 5, 4, 9};                          \n+    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n \n-    // --- Elemento do meio ---\n     for(int i = 0; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n         double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n@@ -33,17 +31,8 @@\n         primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    // --- Imprimir resultados ---\n-    cout << \"Tempo (ms) - elemento do meio:\\n\";\n-    for(auto &p : meioSequencial){\n-        cout << \"Tamanho: \" << p.second << \" -> Tempo: \" << p.first << \" ms\\n\";\n-    }\n+    \n \n-    cout << \"\\nTempo (ms) - elemento do primeiro:\\n\";\n-    for(auto &p : primeiroSequencial){\n-        cout << \"Tamanho: \" << p.second << \" -> Tempo: \" << p.first << \" ms\\n\";\n-    }\n-\n     return 0;\n }\n"
                },
                {
                    "date": 1758246308243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,11 @@\n     map<double,int> primeiroSequencial;\n \n     int array1[] = {1, 2, 5, 4, 9};                          \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14}; // tamanho 16, 5 no índice 6\n+    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n-    for(int i = 0; i < 3; i++){\n+    for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n         double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n \n"
                },
                {
                    "date": 1758246324104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    for(int i = 0; i < 3; i++){\n+    for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n         double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n \n@@ -31,8 +31,30 @@\n         primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n+    // --- Busca Binária: elemento do meio ---\n+    for(int i = 0; i < 3; i++){\n+        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 5);\n+        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 5);\n+        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 5);\n+\n+        meioBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        meioBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        meioBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n+\n+    // --- Busca Binária: elemento do início ---\n+    for(int i = 0; i < 3; i++){\n+        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 1);\n+        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 1);\n+        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 1);\n+\n+        primeiroBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n+        primeiroBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n+        primeiroBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n+    }\n+\n     \n \n     return 0;\n }\n"
                },
                {
                    "date": 1758246330614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,9 @@\n         primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    // --- Busca Binária: elemento do meio ---\n-    for(int i = 0; i < 3; i++){\n+    for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 5);\n         double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 5);\n         double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 5);\n \n@@ -42,9 +41,8 @@\n         meioBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         meioBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    // --- Busca Binária: elemento do início ---\n     for(int i = 0; i < 3; i++){\n         double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 1);\n         double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 1);\n         double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 1);\n"
                },
                {
                    "date": 1758246462941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n int main() {\n     map<double,int> meioSequencial;\n     map<double,int> primeiroSequencial;\n \n+\n+    \n     int array1[] = {1, 2, 5, 4, 9};                          \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n@@ -41,9 +43,9 @@\n         meioBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         meioBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    for(int i = 0; i < 3; i++){\n+    for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 1);\n         double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 1);\n         double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 1);\n \n"
                },
                {
                    "date": 1758246500085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,14 +7,16 @@\n int main() {\n     map<double,int> meioSequencial;\n     map<double,int> primeiroSequencial;\n \n+    map<double,int> meioBinaria;\n+    map<double,int> primeiroBinaria;\n \n-    \n     int array1[] = {1, 2, 5, 4, 9};                          \n     int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n     int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n \n+    // --- Preenchendo os mapas ---\n     for(int i = 1; i < 3; i++){\n         double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n         double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n         double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n@@ -53,8 +55,27 @@\n         primeiroBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n         primeiroBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n     }\n \n-    \n+    // --- Print dos 4 mapas ---\n+    cout << \"=== Meio Sequencial Inversa ===\\n\";\n+    for(auto &p : meioSequencial){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n \n+    cout << \"\\n=== Primeiro Sequencial Inversa ===\\n\";\n+    for(auto &p : primeiroSequencial){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    cout << \"\\n=== Meio Busca Binária ===\\n\";\n+    for(auto &p : meioBinaria){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n+    cout << \"\\n=== Primeiro Busca Binária ===\\n\";\n+    for(auto &p : primeiroBinaria){\n+        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n+    }\n+\n     return 0;\n }\n"
                },
                {
                    "date": 1758246643252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,81 +1,21 @@\n-#include <iostream>\n-#include <map>\n-#include \"Funcoes.h\"\n+#ifndef FUNCOES_H\n+#define FUNCOES_H\n \n-using namespace std;\n+int buscaSequencialInversa(int v[], int n, int x);\n+int buscaBinaria(int v[], int n, int x);\n \n-int main() {\n-    map<double,int> meioSequencial;\n-    map<double,int> primeiroSequencial;\n+template <typename Func, typename... Args>\n+double medirTempo(Func func, Args... args) {\n+    auto inicio = std::chrono::high_resolution_clock::now();\n+    func(args...);\n+    auto fim = std::chrono::high_resolution_clock::now();\n \n-    map<double,int> meioBinaria;\n-    map<double,int> primeiroBinaria;\n+    std::chrono::duration<double, std::milli> duracao = fim - inicio;\n+    return duracao.count();\n+}\n \n-    int array1[] = {1, 2, 5, 4, 9};                          \n-    int array2[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};          \n-    int array3[] = {1, 2, 3, 4, 20, 6, 21, 5, 8, 7, 10, 11, 12, 13, 14};\n+//faz 5 casos diferente de busca para buscabinaria e sequencial\n+//faz uma media no final \n+//plota um gráfico de tamanho de n/tempo de execução\n \n-    // --- Preenchendo os mapas ---\n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 5);\n-        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 5);\n-        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 5);\n-\n-        meioSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        meioSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        meioSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n-    }\n-\n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaSequencialInversa, array1, sizeof(array1)/sizeof(array1[0]), 1);\n-        double tempo2 = medirTempo(buscaSequencialInversa, array2, sizeof(array2)/sizeof(array2[0]), 1);\n-        double tempo3 = medirTempo(buscaSequencialInversa, array3, sizeof(array3)/sizeof(array3[0]), 1);\n-\n-        primeiroSequencial[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        primeiroSequencial[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        primeiroSequencial[tempo3] = sizeof(array3)/sizeof(array3[0]);\n-    }\n-\n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 5);\n-        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 5);\n-        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 5);\n-\n-        meioBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        meioBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        meioBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n-    }\n-\n-    for(int i = 1; i < 3; i++){\n-        double tempo1 = medirTempo(buscaBinaria, array1, sizeof(array1)/sizeof(array1[0]), 1);\n-        double tempo2 = medirTempo(buscaBinaria, array2, sizeof(array2)/sizeof(array2[0]), 1);\n-        double tempo3 = medirTempo(buscaBinaria, array3, sizeof(array3)/sizeof(array3[0]), 1);\n-\n-        primeiroBinaria[tempo1] = sizeof(array1)/sizeof(array1[0]);\n-        primeiroBinaria[tempo2] = sizeof(array2)/sizeof(array2[0]);\n-        primeiroBinaria[tempo3] = sizeof(array3)/sizeof(array3[0]);\n-    }\n-\n-    // --- Print dos 4 mapas ---\n-    cout << \"=== Meio Sequencial Inversa ===\\n\";\n-    for(auto &p : meioSequencial){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Primeiro Sequencial Inversa ===\\n\";\n-    for(auto &p : primeiroSequencial){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Meio Busca Binária ===\\n\";\n-    for(auto &p : meioBinaria){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    cout << \"\\n=== Primeiro Busca Binária ===\\n\";\n-    for(auto &p : primeiroBinaria){\n-        cout << \"Tempo: \" << p.first << \" ms -> Array ID/Tamanho: \" << p.second << endl;\n-    }\n-\n-    return 0;\n-}\n+#endif\n"
                },
                {
                    "date": 1758247757095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,25 @@\n #ifndef FUNCOES_H\n #define FUNCOES_H\n+#include <chrono>\n \n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n-    auto inicio = std::chrono::high_resolution_clock::now();\n-    func(args...);\n-    auto fim = std::chrono::high_resolution_clock::now();\n+    const int N = 1000; // número de repetições\n+    double total = 0.0;\n \n-    std::chrono::duration<double, std::milli> duracao = fim - inicio;\n-    return duracao.count();\n+    for (int i = 0; i < N; ++i) {\n+        auto inicio = std::chrono::high_resolution_clock::now();\n+        func(args...);\n+        auto fim = std::chrono::high_resolution_clock::now();\n+        std::chrono::duration<double, std::milli> duracao = fim - inicio;\n+        total += duracao.count();\n+    }\n+\n+    return total / N; // média em milissegundos\n }\n \n-//faz 5 casos diferente de busca para buscabinaria e sequencial\n-//faz uma media no final \n-//plota um gráfico de tamanho de n/tempo de execução\n \n #endif\n"
                },
                {
                    "date": 1758249337197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,6 +20,32 @@\n \n     return total / N; // média em milissegundos\n }\n \n+template<typename Func>\n+void testarAlgoritmo(const string &nomeCSV, Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n+    map<double, int> tempos;\n \n+    ofstream arquivoCSV(nomeCSV);\n+    arquivoCSV << \"TamanhoArray,Tempo(ms)\\n\";\n+\n+    for(int i = 0; i < qtdTamanhos; i++){\n+        int n = tamanhos[i];\n+        int* array = new int[n];\n+        for(int j = 0; j < n; j++)\n+            array[j] = j + 1;  // Array ordenado\n+\n+        double tempo = medirTempo(algoritmo, array, n, elementoProcurado);\n+        tempos[tempo] = n;\n+\n+        // Preenche CSV\n+        arquivoCSV << n << \",\" << tempo << \"\\n\";\n+\n+        delete[] array;\n+    }\n+\n+    arquivoCSV.close();\n+    tempos.clear(); // Limpa o mapa para próximo algoritmo\n+    cout << \"CSV gerado: \" << nomeCSV << endl;\n+}\n+\n #endif\n"
                },
                {
                    "date": 1758249458940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,16 @@\n #ifndef FUNCOES_H\n #define FUNCOES_H\n+\n #include <chrono>\n+#include <map>\n+#include <string>\n+#include <fstream>\n+#include <iostream> // para cout, endl\n+#include <algorithm>\n \n+using namespace std; // para não precisar colocar std:: na frente\n+\n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n \n template <typename Func, typename... Args>\n@@ -10,12 +18,12 @@\n     const int N = 1000; // número de repetições\n     double total = 0.0;\n \n     for (int i = 0; i < N; ++i) {\n-        auto inicio = std::chrono::high_resolution_clock::now();\n+        auto inicio = chrono::high_resolution_clock::now();\n         func(args...);\n-        auto fim = std::chrono::high_resolution_clock::now();\n-        std::chrono::duration<double, std::milli> duracao = fim - inicio;\n+        auto fim = chrono::high_resolution_clock::now();\n+        chrono::duration<double, milli> duracao = fim - inicio;\n         total += duracao.count();\n     }\n \n     return total / N; // média em milissegundos\n"
                },
                {
                    "date": 1758249774833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n using namespace std; // para não precisar colocar std:: na frente\n \n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n+void gerarGrafico(const string& titulo, const map<int, double>& dados);\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n     const int N = 1000; // número de repetições\n"
                },
                {
                    "date": 1758249845663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,31 +30,20 @@\n     return total / N; // média em milissegundos\n }\n \n template<typename Func>\n-void testarAlgoritmo(const string &nomeCSV, Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n-    map<double, int> tempos;\n+map<int, double> testarAlgoritmo(Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n+    map<int, double> tempos;\n \n-    ofstream arquivoCSV(nomeCSV);\n-    arquivoCSV << \"TamanhoArray,Tempo(ms)\\n\";\n+    for(int i = 0; i < qtdTamanhos; i++){\n+        int n = tamanhos[i];\n+        vector<int> array(n); \n+        for(int j = 0; j < n; j++)\n+            array[j] = j + 1;\n \n-    for(int i = 0; i < qtdTamanhos; i++){\n-        int n = tamanhos[i];\n-        int* array = new int[n];\n-        for(int j = 0; j < n; j++)\n-            array[j] = j + 1;  // Array ordenado\n+        double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n+        tempos[n] = tempo;\n+    }\n \n-        double tempo = medirTempo(algoritmo, array, n, elementoProcurado);\n-        tempos[tempo] = n;\n-\n-        // Preenche CSV\n-        arquivoCSV << n << \",\" << tempo << \"\\n\";\n-\n-        delete[] array;\n-    }\n-\n-    arquivoCSV.close();\n-    tempos.clear(); // Limpa o mapa para próximo algoritmo\n-    cout << \"CSV gerado: \" << nomeCSV << endl;\n+    return tempos;\n }\n-\n #endif\n"
                },
                {
                    "date": 1758249962579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n }\n \n template<typename Func>\n map<int, double> testarAlgoritmo(Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n-    map<int, double> tempos;\n+    map<int, double> tempos;\n \n     for(int i = 0; i < qtdTamanhos; i++){\n         int n = tamanhos[i];\n         vector<int> array(n); \n"
                },
                {
                    "date": 1758249968401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,12 +33,12 @@\n template<typename Func>\n map<int, double> testarAlgoritmo(Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n     map<int, double> tempos;\n \n-    for(int i = 0; i < qtdTamanhos; i++){\n-        int n = tamanhos[i];\n-        vector<int> array(n); \n-        for(int j = 0; j < n; j++)\n+    for(int i = 0; i < qtdTamanhos; i++){\n+    int n = tamanhos[i];\n+    vector<int> array(n); \n+    for(int j = 0; j < n; j++)\n             array[j] = j + 1;\n \n         double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n         tempos[n] = tempo;\n"
                },
                {
                    "date": 1758249974336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,12 +37,12 @@\n     for(int i = 0; i < qtdTamanhos; i++){\n     int n = tamanhos[i];\n     vector<int> array(n); \n     for(int j = 0; j < n; j++)\n-            array[j] = j + 1;\n+     array[j] = j + 1;\n \n-        double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n-        tempos[n] = tempo;\n+     double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n+    tempos[n] = tempo;\n     }\n \n     return tempos;\n }\n"
                },
                {
                    "date": 1758249986457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,16 +34,16 @@\n map<int, double> testarAlgoritmo(Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n     map<int, double> tempos;\n \n     for(int i = 0; i < qtdTamanhos; i++){\n-    int n = tamanhos[i];\n-    vector<int> array(n); \n+        int n = tamanhos[i];\n+        vector<int> array(n); \n     for(int j = 0; j < n; j++)\n      array[j] = j + 1;\n \n      double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n     tempos[n] = tempo;\n-    }\n+     }\n \n-    return tempos;\n+     return tempos;\n }\n #endif\n"
                },
                {
                    "date": 1758249992339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n     for(int i = 0; i < qtdTamanhos; i++){\n         int n = tamanhos[i];\n         vector<int> array(n); \n-    for(int j = 0; j < n; j++)\n+        for(int j = 0; j < n; j++)\n      array[j] = j + 1;\n \n      double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n     tempos[n] = tempo;\n"
                },
                {
                    "date": 1758250022208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n #include <string>\n #include <fstream>\n #include <iostream> // para cout, endl\n #include <algorithm>\n+#include <vector>\n \n using namespace std; // para não precisar colocar std:: na frente\n \n int buscaSequencialInversa(int v[], int n, int x);\n@@ -37,12 +38,11 @@\n     for(int i = 0; i < qtdTamanhos; i++){\n         int n = tamanhos[i];\n         vector<int> array(n); \n         for(int j = 0; j < n; j++)\n-     array[j] = j + 1;\n-\n-     double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n-    tempos[n] = tempo;\n+        array[j] = j + 1;\n+        double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n+        tempos[n] = tempo;\n      }\n \n      return tempos;\n }\n"
                },
                {
                    "date": 1758250118006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,47 +3,41 @@\n \n #include <chrono>\n #include <map>\n #include <string>\n-#include <fstream>\n-#include <iostream> // para cout, endl\n-#include <algorithm>\n-#include <vector>\n+#include <vector> // We need this for the `vector` type\n \n-using namespace std; // para não precisar colocar std:: na frente\n+using namespace std;\n \n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n-void gerarGrafico(const string& titulo, const map<int, double>& dados);\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n-    const int N = 1000; // número de repetições\n+    const int N = 1000;\n     double total = 0.0;\n-\n     for (int i = 0; i < N; ++i) {\n         auto inicio = chrono::high_resolution_clock::now();\n         func(args...);\n         auto fim = chrono::high_resolution_clock::now();\n         chrono::duration<double, milli> duracao = fim - inicio;\n         total += duracao.count();\n     }\n-\n-    return total / N; // média em milissegundos\n+    return total / N;\n }\n \n template<typename Func>\n map<int, double> testarAlgoritmo(Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n     map<int, double> tempos;\n-\n     for(int i = 0; i < qtdTamanhos; i++){\n         int n = tamanhos[i];\n-        vector<int> array(n); \n-        for(int j = 0; j < n; j++)\n-        array[j] = j + 1;\n+        vector<int> array(n);\n+        for(int j = 0; j < n; j++) {\n+            array[j] = j + 1;\n+        }\n         double tempo = medirTempo(algoritmo, array.data(), n, elementoProcurado);\n         tempos[n] = tempo;\n-     }\n+    }\n+    return tempos;\n+}\n \n-     return tempos;\n-}\n-#endif\n+#endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758250216470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n using namespace std;\n \n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n+void gerarGrafico(const string& titulo, const map<int, double>& dados)\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n     const int N = 1000;\n"
                },
                {
                    "date": 1758250229501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n #include <chrono>\n #include <map>\n #include <string>\n-#include <vector> // We need this for the `vector` type\n+#include <vector> \n \n using namespace std;\n \n int buscaSequencialInversa(int v[], int n, int x);\n"
                },
                {
                    "date": 1758250329027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n using namespace std;\n \n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n-void gerarGrafico(const string& titulo, const map<int, double>& dados)\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n     const int N = 1000;\n"
                },
                {
                    "date": 1758250422410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n #include <chrono>\n #include <map>\n #include <string>\n-#include <vector> \n+#include <vector>\n \n using namespace std;\n \n int buscaSequencialInversa(int v[], int n, int x);\n"
                },
                {
                    "date": 1758251904325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n using namespace std;\n \n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n+void gerarGrafico(const string& titulo, const map<int, double>& dados);\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n     const int N = 1000;\n"
                },
                {
                    "date": 1758252283165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,20 +13,26 @@\n void gerarGrafico(const string& titulo, const map<int, double>& dados);\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n-    const int N = 1000;\n+    const int N = 10000; // aumenta repetições para mais precisão\n     double total = 0.0;\n+    vector<double> temposIndividuais;\n+    \n     for (int i = 0; i < N; ++i) {\n         auto inicio = chrono::high_resolution_clock::now();\n         func(args...);\n         auto fim = chrono::high_resolution_clock::now();\n         chrono::duration<double, milli> duracao = fim - inicio;\n-        total += duracao.count();\n+        temposIndividuais.push_back(duracao.count());\n     }\n-    return total / N;\n+\n+    // Opcional: pegar mediana em vez da média\n+    sort(temposIndividuais.begin(), temposIndividuais.end());\n+    return temposIndividuais[N/2]; // mediana\n }\n \n+\n template<typename Func>\n map<int, double> testarAlgoritmo(Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n     map<int, double> tempos;\n     for(int i = 0; i < qtdTamanhos; i++){\n"
                },
                {
                    "date": 1758252331870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n #include <chrono>\n #include <map>\n #include <string>\n #include <vector>\n+#include <algorithm>  // para std::sort\n \n+\n using namespace std;\n \n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n"
                },
                {
                    "date": 1758329095308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n         chrono::duration<double, milli> duracao = fim - inicio;\n         temposIndividuais.push_back(duracao.count());\n     }\n \n-    // Opcional: pegar mediana em vez da média\n     sort(temposIndividuais.begin(), temposIndividuais.end());\n     return temposIndividuais[N/2]; // mediana\n }\n \n"
                },
                {
                    "date": 1758329459483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n void gerarGrafico(const string& titulo, const map<int, double>& dados);\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n-    const int N = 10000; // aumenta repetições para mais precisão\n+    const int N = 10000; \n     double total = 0.0;\n     vector<double> temposIndividuais;\n     \n     for (int i = 0; i < N; ++i) {\n@@ -28,9 +28,9 @@\n         temposIndividuais.push_back(duracao.count());\n     }\n \n     sort(temposIndividuais.begin(), temposIndividuais.end());\n-    return temposIndividuais[N/2]; // mediana\n+    return temposIndividuais[N/2]; \n }\n \n \n template<typename Func>\n"
                },
                {
                    "date": 1758329581164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,12 @@\n \n \n using namespace std;\n \n+\n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n+\n void gerarGrafico(const string& titulo, const map<int, double>& dados);\n \n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n"
                },
                {
                    "date": 1758329601251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,16 @@\n \n \n using namespace std;\n \n-\n+//Algoritmos de busca escolhidos\n int buscaSequencialInversa(int v[], int n, int x);\n int buscaBinaria(int v[], int n, int x);\n \n+//Função para gerar o gráfico \n void gerarGrafico(const string& titulo, const map<int, double>& dados);\n \n+\n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n     const int N = 10000; \n     double total = 0.0;\n"
                },
                {
                    "date": 1758329616255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n //Função para gerar o gráfico \n void gerarGrafico(const string& titulo, const map<int, double>& dados);\n \n-\n+//Função para medir o tempo de execução\n template <typename Func, typename... Args>\n double medirTempo(Func func, Args... args) {\n     const int N = 10000; \n     double total = 0.0;\n@@ -36,8 +36,9 @@\n     return temposIndividuais[N/2]; \n }\n \n \n+//F\n template<typename Func>\n map<int, double> testarAlgoritmo(Func algoritmo, const int tamanhos[], int qtdTamanhos, int elementoProcurado) {\n     map<int, double> tempos;\n     for(int i = 0; i < qtdTamanhos; i++){\n"
                }
            ],
            "date": 1758156830798,
            "name": "Commit-0",
            "content": "#ifndef FUNCOES_H\n#define FUNCOES_H\n\n// Busca sequencial recursiva\nint buscaSequencialRecursiva(int v[], int n, int x, int i = 0);\n\n// Busca binária (vetor já ordenado)\nint buscaBinaria(int v[], int n, int x);\n\n#endif\n"
        }
    ]
}